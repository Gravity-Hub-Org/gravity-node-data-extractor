// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionMerkleProofs transaction merkle proofs
// swagger:model TransactionMerkleProofs
type TransactionMerkleProofs struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// merkle proof
	// Required: true
	MerkleProof []string `json:"merkleProof"`

	// transaction index
	// Required: true
	TransactionIndex *int32 `json:"transactionIndex"`
}

// Validate validates this transaction merkle proofs
func (m *TransactionMerkleProofs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMerkleProof(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionIndex(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionMerkleProofs) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TransactionMerkleProofs) validateMerkleProof(formats strfmt.Registry) error {

	if err := validate.Required("merkleProof", "body", m.MerkleProof); err != nil {
		return err
	}

	return nil
}

func (m *TransactionMerkleProofs) validateTransactionIndex(formats strfmt.Registry) error {

	if err := validate.Required("transactionIndex", "body", m.TransactionIndex); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionMerkleProofs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionMerkleProofs) UnmarshalBinary(b []byte) error {
	var res TransactionMerkleProofs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
