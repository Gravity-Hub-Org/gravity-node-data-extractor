// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetDetails asset details
// swagger:model AssetDetails
type AssetDetails struct {

	// asset Id
	// Required: true
	AssetID *string `json:"assetId"`

	// decimals
	// Required: true
	Decimals *int32 `json:"decimals"`

	// description
	// Required: true
	Description *string `json:"description"`

	// issue height
	// Required: true
	IssueHeight *int32 `json:"issueHeight"`

	// issue timestamp
	// Required: true
	IssueTimestamp *int64 `json:"issueTimestamp"`

	// issuer
	// Required: true
	Issuer *string `json:"issuer"`

	// min sponsored asset fee
	// Required: true
	MinSponsoredAssetFee *int64 `json:"minSponsoredAssetFee"`

	// name
	// Required: true
	Name *string `json:"name"`

	// quantity
	// Required: true
	Quantity *int64 `json:"quantity"`

	// reissuable
	// Required: true
	Reissuable *bool `json:"reissuable"`

	// script details
	// Required: true
	ScriptDetails *AssetDetailsScriptDetails `json:"scriptDetails"`

	// scripted
	// Required: true
	Scripted *bool `json:"scripted"`
}

// Validate validates this asset details
func (m *AssetDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecimals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSponsoredAssetFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReissuable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScripted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetDetails) validateAssetID(formats strfmt.Registry) error {

	if err := validate.Required("assetId", "body", m.AssetID); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateDecimals(formats strfmt.Registry) error {

	if err := validate.Required("decimals", "body", m.Decimals); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateIssueHeight(formats strfmt.Registry) error {

	if err := validate.Required("issueHeight", "body", m.IssueHeight); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateIssueTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("issueTimestamp", "body", m.IssueTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateIssuer(formats strfmt.Registry) error {

	if err := validate.Required("issuer", "body", m.Issuer); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateMinSponsoredAssetFee(formats strfmt.Registry) error {

	if err := validate.Required("minSponsoredAssetFee", "body", m.MinSponsoredAssetFee); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateReissuable(formats strfmt.Registry) error {

	if err := validate.Required("reissuable", "body", m.Reissuable); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetails) validateScriptDetails(formats strfmt.Registry) error {

	if err := validate.Required("scriptDetails", "body", m.ScriptDetails); err != nil {
		return err
	}

	if m.ScriptDetails != nil {
		if err := m.ScriptDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scriptDetails")
			}
			return err
		}
	}

	return nil
}

func (m *AssetDetails) validateScripted(formats strfmt.Registry) error {

	if err := validate.Required("scripted", "body", m.Scripted); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetDetails) UnmarshalBinary(b []byte) error {
	var res AssetDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssetDetailsScriptDetails asset details script details
// swagger:model AssetDetailsScriptDetails
type AssetDetailsScriptDetails struct {

	// script
	// Required: true
	Script *string `json:"script"`

	// script complexity
	// Required: true
	ScriptComplexity *int32 `json:"scriptComplexity"`

	// script text
	// Required: true
	ScriptText *string `json:"scriptText"`
}

// Validate validates this asset details script details
func (m *AssetDetailsScriptDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptComplexity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetDetailsScriptDetails) validateScript(formats strfmt.Registry) error {

	if err := validate.Required("scriptDetails"+"."+"script", "body", m.Script); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetailsScriptDetails) validateScriptComplexity(formats strfmt.Registry) error {

	if err := validate.Required("scriptDetails"+"."+"scriptComplexity", "body", m.ScriptComplexity); err != nil {
		return err
	}

	return nil
}

func (m *AssetDetailsScriptDetails) validateScriptText(formats strfmt.Registry) error {

	if err := validate.Required("scriptDetails"+"."+"scriptText", "body", m.ScriptText); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetDetailsScriptDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetDetailsScriptDetails) UnmarshalBinary(b []byte) error {
	var res AssetDetailsScriptDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
