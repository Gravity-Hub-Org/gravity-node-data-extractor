// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScriptMeta script meta
// swagger:model ScriptMeta
type ScriptMeta struct {

	// callable func types
	// Required: true
	CallableFuncTypes map[string][]ScriptMetaCallableFuncTypesItems0 `json:"callableFuncTypes"`

	// is array arguments
	IsArrayArguments bool `json:"isArrayArguments,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this script meta
func (m *ScriptMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCallableFuncTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScriptMeta) validateCallableFuncTypes(formats strfmt.Registry) error {

	for k := range m.CallableFuncTypes {

		if err := validate.Required("callableFuncTypes"+"."+k, "body", m.CallableFuncTypes[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.CallableFuncTypes[k]); i++ {

			if err := m.CallableFuncTypes[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("callableFuncTypes" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *ScriptMeta) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScriptMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScriptMeta) UnmarshalBinary(b []byte) error {
	var res ScriptMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScriptMetaCallableFuncTypesItems0 script meta callable func types items0
// swagger:model ScriptMetaCallableFuncTypesItems0
type ScriptMetaCallableFuncTypesItems0 struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this script meta callable func types items0
func (m *ScriptMetaCallableFuncTypesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScriptMetaCallableFuncTypesItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ScriptMetaCallableFuncTypesItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScriptMetaCallableFuncTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScriptMetaCallableFuncTypesItems0) UnmarshalBinary(b []byte) error {
	var res ScriptMetaCallableFuncTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
